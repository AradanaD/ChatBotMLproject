{
	"intents": [{
			"tag": "greeting",
			"patterns": ["hey","wassup","hi","ih","hey there","hello","heyyy","hello there"],
			"responses": ["Heyy, i'm Cookie your coding buddy, developed by AltShiftTab! How may i help you?"],
			"context": [""]
		},
		{
			"tag": "goodbye",
			"patterns": ["bye", "see you later", "goodbye", "gtg", "nice chatting with you"],
			"responses": ["byeee","have a nice day :)","bye !"],
			"context": [""]
		},
		{
			"tag": "thanks",
			"patterns": ["thanks", "thank you", "thanks for the help","ty","tysm"],
			"responses": ["no issues", "Anytime!", "You're welcome"],
			"context": [""]
		},
		{
			"tag": "FAQ",
			"patterns": ["Are you a bot?","Are you an actual person or?","is this automated?","is this an automated message?" ],
			"responses": ["yes i am a code-bot"],
			"context": [""]
		},
		{
			"tag": "intro",
			"patterns": ["what can i learn from this bot","what does this bot teach","what does Cookie do","what do we using Cookie?","table of contents","what is the table of contents ?"],
			"responses": ["Hey there ! I have been programmed to aid you in your process of learning python\n Table of Contents :\n 1.Keywords\n 2.Strings\n 3.Identifiers\n 4.Operators and Expressions\n what would you like to start with ?"],
			"context": [""]
		},
		{	"tag": "
		}
		{
			"tag": "operator-declaration",
			"patterns": ["syntax of operators in python","declaration of operators in python","how to declare an operator in python","how do i declare an operator in python with example","sample example of an operator"],
			"responses": ["Python does not allow you to declare your own operators in python. Addition (+) \n Subtraction(-) \n Multiplication(*) \n Exponentiation(**) \n  Division(/) \n Modulus(%) \n Enter types of operator to know more"],
			"context": [""]
		},
		{
			"tag": "kilpo",
			"patterns": ["what are the basics to python programming","what are the basics","how do i start off with coding in python","basics ?" ],
			"responses": ["A short neumonic to remember these by is KILPO- Keywords,Identifiers,Punctuators and Operators"],
			"context": [""]
		},
		{
			"tag": "keywords",
			"patterns": ["what are keywords in python","what is a keyword","keywords" ],
			"responses": ["Keywords are reserved words that have a pre-defined meaning\n List of keywords in Python:\n False,True,else,break,as,def,del,in,is,return,try,while,with,yield,not,or,for,from,class,elif and so on"],
			"context": [""]
		},
		{
			"tag": "identifier",
			"patterns": ["what are identifiers in Python","identifiers in python","ientifiers" ],
			"responses": ["An identifier is a sequence of one or more characters used to provide a name for a given program element\n Examples: line , num_credits and gpa\n Python is case sensitive , thus, Line is different from lineIdentifiers may contain letters and digits and underscorecharacter\n Naming Convention:\n Can begin with alphabets a-z or A-Z\n Cannot begin with a digit 0-9 or a special character\n Spaces are not allowed as part of an identifier\n underscore character, _ is also allowed to aid in the readability of long identifier names.It should not be used as the first character\n valid idntifiers are total_sales,totalSales\n Invalid identifiers are _2110totalsales,total sales "],
			"context": [""]
		},
		{
			"tag": "datatypes",
			"patterns": ["what are the basic data types in python","datatypes in python","data types in python","basic data types in python","types of data","types of data in python","types in python" ],
			"responses": ["str,int,float,complexlist,tuple,range,dict,set,bool,frozenset,bytearray,memoryview,NoneType\n we don't need to explicitly spicify what the variable type is it is declared on it's own depending on the values"],
			"context": [""]
		},
		{
			"tag": "datatypes-int",
			"patterns": ["what is the int dataype","what is the integer datatype","syntax for int datatype","syntax for int","syntax for integer datatype","how is int datatype defined","int definition","what is the declaration of int datatype","int definition","integer definition" ],
			"responses": ["int is an integer datatype\n syntax:x = 20\n "],
			"context": [""]
		},
		{
			"tag": "datatypes-float",
			"patterns": ["what is the float dataype","what is the floating point datatype","syntax for float datatype","syntax for float","syntax for floating point datatype","how is float datatype defined","float definition","what is the declaration of float datatype","float definition","floating point definition"],
			"responses": ["float is a numeric datatype,that consists of decimal values\n syntax:x = 20.5\n "],
			"context": [""]
		},
		{
			"tag": "datatypes-list",
			"patterns": ["what is the list datatype","list data type","what is the syntax for list datatype","list datatype syntax","declaration of list","list definition","what is the definition for list","list syntax"],
			"responses": ["A list is a sequence data structure\n syntax:x = ['apple','banana','cherry']"],
			"context": [""]
		},
		{
			"tag": "datatypes-tuple",
			"patterns": ["what is the tuple datatype","tuple data type","what is the syntax for tuple datatype","tuple datatype syntax","declaration of tuple","tuple definition","what is the definition for tuple","tuple syntax"],
			"responses": ["A tuple is a sequence data structure\n syntax:x = x = ('apple','mango','cherry')"],
			"context": [""]
		},
		
		
		{
			"tag": "stringdefinition",
			"patterns": ["what is a string","string","string defination","how do you define a string"],
			"responses": ["A string is the collection of characters or a sequence of characters. \nEx:'python','go123'"],
			"context": [""]
		},
		{
			"tag": "stringcreation",
			"patterns": ["how to create a string","string creation","string syntax","what is the syntax of a string"],
			"responses": ["Creating strings is as straight forward as assigning a value to a variable. \nEx: var='python'"],
			"context": [""]
		},
		{
			"tag": "stringindexing",
			"patterns": ["how to index a string","string indexing","can we access each character","accessing each character"],
			"responses": ["A string of n characters is indexed starting from 0 to n-1 and each character can be indexed using these indexes. \nEg:var='python',var[0]='p',var[3]='h'"],
			"context": [""]
		},
		{
			"tag": "stringcharacteristsics",
			"patterns": ["what are the characteristics of string","string characteristics"],
			"responses": ["1.Strings are immutable i.e. we cannot modify individual characters \n2.A string can have zero or more characters\n3.String is iterable\n4.Each character of strings can be accessed by indexing"],
			"context": [""]
		},
		{
			"tag": "stringslicing",
			"patterns": ["how to slice strings","string slicing","how to obtain substring","substring","access part of string"],
			"responses": ["Strings can be sliced. We can obtain substrings through slicing\nEx: s='Monty python'\ns[0:4]='Monty' , s[6:7]='p'"],
			"context": [""]
		},
		{
			"tag": "stringoperations",
			"patterns": ["string operations","what operations can we perform on strings","operations on strings"],
			"responses": ["1)len()\n2)min()\n3)max()\n4)Concatenation '+'\n5)Repetition operator '*'"],
			"context": [""]
		},
		{
			"tag": "operator",
			"patterns": ["what can I learn in operators","what are operators","operators in python","operators"],
			"responses": ["An operator is a symbol that denotes an operation that is performed on data. The data used with operators is called an operand"],
			"context": [""]
		},
		{
			"tag": "operator-declaration",
			"patterns": ["syntax of operators in python","declaration of operators in python","how to declare an operator in python","how do i declare an operator in python with example","sample example of an operator"],
			"responses": ["Python does not allow you to declare your own operators in python. Addition (+) \n Subtraction(-) \n Multiplication(*) \n Exponentiation(**) \n  Division(/) \n Modulus(%) \n Enter types of operator to know more"],
			"context": [""]
		},
		{
			"tag": "operator-types",
			"patterns": ["what are the types of operators", "how many types of operators are there", "unary and binary operator ","arity","rank","types of operator","operator types"],
			"responses": ["There are two main types of operators in python - binary operators and unary operators. Enter unary or binary keywords to know more"],
			"context": [""]
		},
		{
			"tag": "operator-unary",
			"patterns": ["what is a unary operator", "unary operator examples", "unary ","what is the meaning of a unary operator","define unary operators","explain unary operators"],
			"responses": ["Unary Operators are those which operates on only one operand. eg negation operator -x will give the negative value of variable x. -5 will give the negative value of 5"],
			"context": [""]
		},
		{
			"tag": "operator-binary",
			"patterns": ["what is a binary operator", "binary operator examples", "binary ","what is the meaning of a binary operator","explain binary operators to me","define binary operators"],
			"responses": ["Binary Operators are those which require 2 operands.There are various types of binary operators like addition, subtraction, multiplication, division, exponentiation, modulus etc. Type which binary operator you would like to know more about"],
			"context": [""]
		},
		{
			"tag": "binary-addition",
			"patterns": ["what is a binary addition operator", "binary addition operator examples", "addition","what is the meaning of a addition operator", "addition operator in python","tell me about the addition operator in python"],
			"responses": ["The binary addition operator is represented using + and it returns the arithmetic sum of the two operands. eg 2+3 = 5 \n 4+5=9 \n 2+8=10. Different data types will return different answer values depending on the data type of the two operands\n  Adding 2 integers will return an integer value eg. 2+4=6 \n Adding two floating point values will return a floating point value. eg 4.0+3.0=7.0 \n Adding one floating point value to one integer type value will return a floating type value eg 1+2.0=3.0 and 1.0+2=3.0"],
			"context": [""]
		},
		{
			"tag": "binary-subtraction",
			"patterns": ["what is a binary subtraction operator", "binary subtraction operator examples", "subtraction","what is the meaning of a subtraction operator", "subtraction operator in python","tell me about the subtraction operator in python"],
			"responses": ["The binary subtraction operator is represented using - and it returns the difference between the two operands. eg 12-7 = 5 \n"],
			"context": [""]
		},
		{
			"tag": "binary-multiplication",
			"patterns": ["what is a binary multiplication operator", "binary multiplication operator examples", "multiplication","what is the meaning of a multiplication operator", "multiplication operator in python","tell me about the multiplication operator in python"],
			"responses": ["The multiplication operator can be used only in the binary mode with 2 operands. It is represented with * and will return the product value of the two operands. eg. 5*6 = 30","The multiplication operator can be used only in the binary mode. It is represented with * and will return the product value of the two operands. eg. 7*3 = 21","The multiplication operator can be used only in the binary mode. It is represented with * and will return the product value of the two operands. eg. 8*4 = 32"],
			"context": [""]
		},
		{
			"tag": "binary-division",
			"patterns": ["what is a binary division operator", "binary division operator examples", "division","what is the meaning of a division operator", "division operator in python","tell me about the division operator in python"],
			"responses": ["The division operator can be used only in the binary mode with 2 operands. It is represented with / and will return the quotient value of the two operands. eg. 45/9 = 5","The division operator can be used only in the binary mode with 2 operands. It is represented with / and will return the quotient value of the two operands. eg. 63/7 = 9","The division operator can be used only in the binary mode with 2 operands. It is represented with / and will return the quotient value of the two operands. eg. 10/3 = 3"],
			"context": [""]
		}
	]
}
